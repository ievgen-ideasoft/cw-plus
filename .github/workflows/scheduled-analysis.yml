name: Scheduled CosmWasm Analysis

on:
  schedule:
    # Run weekly on Sunday at 2:00 AM
    - cron: '0 2 * * 0'
  workflow_dispatch:
    # Allow manual trigger of this workflow

jobs:
  comprehensive-analysis:
    name: Comprehensive Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.84.0
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          override: true
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check formatting
        run: cargo fmt -- --check
      
      - name: Run clippy
        run: cargo clippy --all-features -- -D warnings -A clippy::manual-div-ceil
      
      - name: Check WASM compilation
        run: |
          # Only check libraries, not schema generators
          find ./contracts -name Cargo.toml -print0 | xargs -0 -I '{}' sh -c 'cd $(dirname {}) && echo "Checking $(basename $(pwd))" && cargo check --lib --target wasm32-unknown-unknown'
      
      - name: Setup security analysis tools
        run: |
          # Try to install security tools
          cargo install cargo-audit cargo-deny || echo "Failed to install some security tools"
          
          # Create directories for reports
          mkdir -p reports/{security,stats,audit}
      
      - name: Generate code statistics
        run: |
          echo "# CosmWasm Code Statistics" > reports/stats/code_stats.md
          echo "Generated on $(date)" >> reports/stats/code_stats.md
          echo "" >> reports/stats/code_stats.md
          
          echo "## Lines of Code" >> reports/stats/code_stats.md
          echo "| Directory | Files | Lines |" >> reports/stats/code_stats.md
          echo "|-----------|-------|-------|" >> reports/stats/code_stats.md
          
          # Count lines in contracts
          find ./contracts -name "*.rs" -print0 | xargs -0 wc -l 2>/dev/null | tail -n1 | 
            awk '{print "| contracts | " $1 " | " $2 " |"}' >> reports/stats/code_stats.md
          
          # Count lines in packages
          find ./packages -name "*.rs" -print0 | xargs -0 wc -l 2>/dev/null | tail -n1 |
            awk '{print "| packages | " $1 " | " $2 " |"}' >> reports/stats/code_stats.md
          
          echo "" >> reports/stats/code_stats.md
          echo "## Contract Size" >> reports/stats/code_stats.md
          echo "| Contract | Source LOC | Files |" >> reports/stats/code_stats.md
          echo "|----------|------------|-------|" >> reports/stats/code_stats.md
          
          # Get stats for each contract
          for dir in $(find ./contracts -maxdepth 1 -mindepth 1 -type d); do
            contract=$(basename $dir)
            files=$(find $dir -name "*.rs" | wc -l)
            loc=$(find $dir -name "*.rs" -print0 | xargs -0 cat | wc -l)
            echo "| $contract | $loc | $files |" >> reports/stats/code_stats.md
          done
      
      - name: Run comprehensive security scan
        run: |
          echo "# Security Scan Report" > reports/security/security_report.md
          echo "Generated on $(date)" >> reports/security/security_report.md
          echo "" >> reports/security/security_report.md
          
          # Check for unwrap/expect patterns
          echo "## Unwrap/Expect Usage" >> reports/security/security_report.md
          grep -r --include="*.rs" -n "unwrap()" --include="*.rs" -n "expect(" ./contracts | 
            sort -t: -k1,1 -k2,2n | 
            sed 's/^/- /' >> reports/security/security_report.md || echo "None found" >> reports/security/security_report.md
          echo "" >> reports/security/security_report.md
          
          # Check for panic macros
          echo "## Panic Macros" >> reports/security/security_report.md
          grep -r --include="*.rs" -n "panic!" ./contracts | 
            sort -t: -k1,1 -k2,2n | 
            sed 's/^/- /' >> reports/security/security_report.md || echo "None found" >> reports/security/security_report.md
          echo "" >> reports/security/security_report.md
          
          # Check for unchecked arithmetic
          echo "## Unchecked Arithmetic" >> reports/security/security_report.md
          grep -r --include="*.rs" -n "\.\(add\|sub\|mul\|div\)(.*)" ./contracts | 
            grep -v "checked_" | 
            sort -t: -k1,1 -k2,2n | 
            sed 's/^/- /' >> reports/security/security_report.md || echo "None found" >> reports/security/security_report.md
          echo "" >> reports/security/security_report.md
          
          # Run cargo-audit if available
          if command -v cargo-audit >/dev/null; then
            echo "## Dependency Audit" >> reports/security/security_report.md
            cargo audit -q --json | jq . > reports/audit/audit.json || echo "No vulnerabilities found" > reports/audit/audit.json
            echo "See audit.json for detailed results" >> reports/security/security_report.md
          fi
      
      - name: Generate comprehensive schemas
        run: |
          mkdir -p schema-output
          
          # Create schema generation script
          cat > generate_comprehensive_schemas.sh << 'EOF'
          #!/bin/bash
          # Process each contract
          find ./contracts -name Cargo.toml | while read contract_path; do
            contract_dir=$(dirname "$contract_path")
            contract_name=$(basename "$contract_dir")
            echo "Processing $contract_name..."
            
            schema_dir="schema-output/$contract_name"
            mkdir -p "$schema_dir"
            
            # Method 1: Try to use existing schema example
            echo "  Attempting to run schema example..."
            (cd "$contract_dir" && cargo run --example schema) && {
              # If schema files were generated, copy them
              if [ -d "$contract_dir/schema" ] && [ "$(ls -A "$contract_dir/schema" 2>/dev/null)" ]; then
                echo "  Schema example successful, copying files..."
                cp -r "$contract_dir/schema/"* "$schema_dir/"
                continue
              fi
            }
            
            # Method 2: Try to extract message types
            echo "  Extracting message types manually..."
            msg_file="$contract_dir/src/msg.rs"
            
            # Look for common message types
            for msg_type in "InstantiateMsg" "ExecuteMsg" "QueryMsg" "MigrateMsg"; do
              if grep -q "struct $msg_type" "$contract_dir/src" -r || grep -q "enum $msg_type" "$contract_dir/src" -r; then
                echo "  Creating schema for $msg_type..."
                filename=$(echo "$msg_type" | tr '[:upper:]' '[:lower:]').json
                
                cat > "$schema_dir/$filename" << SCHEMA
          {
            "title": "$contract_name $msg_type Schema",
            "description": "Generated by comprehensive schema generator",
            "type": "object",
            "properties": {},
            "additionalProperties": true
          }
          SCHEMA
              fi
            done
            
            # If we couldn't find any message types, create a generic placeholder
            if [ ! "$(ls -A "$schema_dir" 2>/dev/null)" ]; then
              echo "  Creating fallback generic schema..."
              cat > "$schema_dir/schema.json" << SCHEMA
          {
            "title": "$contract_name Schema",
            "description": "Generated placeholder schema",
            "type": "object",
            "additionalProperties": true
          }
          SCHEMA
            fi
            
            echo "  Completed schema generation for $contract_name"
          done
          EOF
          
          chmod +x generate_comprehensive_schemas.sh
          ./generate_comprehensive_schemas.sh
      
      - name: Generate comprehensive report
        run: |
          mkdir -p comprehensive-report
          
          # Create index.html with advanced styling
          cat > comprehensive-report/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>CosmWasm Comprehensive Analysis</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
                line-height: 1.6;
                margin: 0;
                padding: 0;
                color: #333;
                background-color: #f8f9fa;
              }
              .container {
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
              }
              header {
                background-color: #1a237e;
                color: white;
                padding: 20px;
                margin-bottom: 30px;
              }
              h1 {
                margin: 0;
                font-size: 2.5em;
              }
              h2 {
                color: #1a237e;
                border-bottom: 2px solid #e0e0e0;
                padding-bottom: 10px;
                margin-top: 40px;
              }
              .section {
                background-color: white;
                border-radius: 8px;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                padding: 20px;
                margin-bottom: 30px;
              }
              pre {
                background: #f5f5f5;
                padding: 15px;
                border-radius: 5px;
                overflow: auto;
                font-family: 'Courier New', Courier, monospace;
                font-size: 14px;
              }
              .warning { color: #ff9800; }
              .error { color: #f44336; }
              .success { color: #4caf50; }
              table {
                width: 100%;
                border-collapse: collapse;
                margin: 20px 0;
              }
              th, td {
                text-align: left;
                padding: 12px;
                border-bottom: 1px solid #ddd;
              }
              th {
                background-color: #f2f2f2;
                font-weight: bold;
              }
              tr:hover {
                background-color: #f5f5f5;
              }
              .summary-box {
                display: flex;
                flex-wrap: wrap;
                gap: 15px;
                margin-bottom: 20px;
              }
              .summary-item {
                flex: 1;
                min-width: 200px;
                background-color: #e8eaf6;
                border-radius: 5px;
                padding: 15px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
              }
              .summary-item h3 {
                margin-top: 0;
                color: #3949ab;
              }
              .summary-number {
                font-size: 24px;
                font-weight: bold;
                margin: 10px 0;
              }
              footer {
                text-align: center;
                margin-top: 50px;
                padding: 20px;
                background-color: #f5f5f5;
                color: #666;
                font-size: 0.9em;
              }
            </style>
          </head>
          <body>
            <header>
              <div class="container">
                <h1>CosmWasm Comprehensive Analysis</h1>
                <p>Generated on $(date)</p>
              </div>
            </header>
            
            <div class="container">
              <!-- Summary Section -->
              <div class="section">
                <h2>Analysis Summary</h2>
                <div class="summary-box">
                  <div class="summary-item">
                    <h3>Contracts</h3>
                    <div class="summary-number">$(find ./contracts -maxdepth 1 -mindepth 1 -type d | wc -l)</div>
                    <p>Total contracts analyzed</p>
                  </div>
                  
                  <div class="summary-item">
                    <h3>Schema Files</h3>
                    <div class="summary-number">$(find ./schema-output -type f | wc -l)</div>
                    <p>Generated schema files</p>
                  </div>
                  
                  <div class="summary-item">
                    <h3>Code</h3>
                    <div class="summary-number">$(find ./contracts ./packages -name "*.rs" -print0 | xargs -0 cat | wc -l)</div>
                    <p>Lines of Rust code</p>
                  </div>
                  
                  <div class="summary-item">
                    <h3>Security</h3>
                    <div class="summary-number">$(grep -r --include="*.rs" -l "unwrap()\|expect(\|panic!" ./contracts | wc -l)</div>
                    <p>Files with potential issues</p>
                  </div>
                </div>
              </div>
              
              <!-- Code Statistics -->
              <div class="section">
                <h2>Code Statistics</h2>
                <pre>$(cat reports/stats/code_stats.md)</pre>
              </div>
              
              <!-- Security Analysis -->
              <div class="section">
                <h2>Security Analysis</h2>
                <pre>$(cat reports/security/security_report.md)</pre>
              </div>
              
              <!-- Schema Information -->
              <div class="section">
                <h2>Schema Generation</h2>
                <table>
                  <tr>
                    <th>Contract</th>
                    <th>Files</th>
                    <th>Status</th>
                  </tr>
          EOF
          
          # Add schema info to the report
          for dir in $(find schema-output -mindepth 1 -type d 2>/dev/null || echo ""); do
            if [ -n "$dir" ]; then
              contract=$(basename "$dir")
              count=$(find "$dir" -type f | wc -l)
              if [ "$count" -gt 0 ]; then
                status="<span class='success'>Success</span>"
              else
                status="<span class='warning'>No schemas</span>"
              fi
              echo "<tr><td>$contract</td><td>$count</td><td>$status</td></tr>" >> comprehensive-report/index.html
            fi
          done
          
          # Finish the HTML
          cat >> comprehensive-report/index.html << 'EOF'
                </table>
              </div>
              
              <!-- CosmWasm Notes -->
              <div class="section">
                <h2>CosmWasm 2.0 Compatibility</h2>
                <p>This repository uses CosmWasm 2.0 dependencies but may not have all contracts fully updated for the new QueryResponses trait requirement.</p>
                <p>To fully support schema generation with CosmWasm 2.0, update your QueryMsg types to implement QueryResponses as described in the <a href="https://docs.cosmwasm.com/docs/1.0/smart-contracts/responses/">CosmWasm documentation</a>.</p>
                
                <h3>QueryResponses Example</h3>
                <pre>
          #[derive(QueryResponses)]
          pub enum QueryMsg {
              #[returns(BalanceResponse)]
              Balance { address: String },
              
              #[returns(AllowanceResponse)]
              Allowance { owner: String, spender: String },
          }
                </pre>
              </div>
            </div>
            
            <footer>
              <div class="container">
                <p>CosmWasm Static Analysis Report - GitHub Actions</p>
              </div>
            </footer>
          </body>
          </html>
          EOF
      
      - name: Upload comprehensive report
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-report
          path: comprehensive-report/
      
      - name: Upload schemas
        uses: actions/upload-artifact@v3
        with:
          name: complete-schemas
          path: schema-output/
      
      - name: Upload statistics and security reports
        uses: actions/upload-artifact@v3
        with:
          name: detailed-reports
          path: reports/
      
      # Optional - deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./comprehensive-report
          destination_dir: reports/comprehensive